	rodAssignHandleToParameter(
		?parameter S_parameter
			手柄所附着的参数，值为字符串或符号，
		?rodObj R_rodObj
			所创建手柄所在的ROD对象，此函数必须指定一个值，无默认值
		?handleName Sl_handleName
			手柄名，值为字符串、符号或列表，如果不指定或指定的手柄名不是R_rodObj中的点，则抛错，无默认值
		[?displayName S_displayName]
			显示于手柄旁的文字，值为字符串或符号，如参数名或表达式，如果同时指定了S_displayExpression的值，则系统原样输出S_displayName的值，并用“=”连接其与S_displayExpression的计算值，如果未指定S_displayExpression的值，则系统作为表达式计算S_displayName的值，并将其原样输出后用“=”连接其计算值，若表达式解析失败，系统用Eval not successful代替计算值，如果未指定，则不现实任何文字，无默认值
		[?displayExpression S_displayExpression]
			系统计算S_displayExpression的值，如果未指定S_displayName的值则直接将计算后的值显示在手柄旁，否则见S_displayName中的说明，无默认值
		[?stretchDir S_stretchDir]
			手柄的操作方向，值为字符串或符号，有效值为x、X、y和Y，默认值为x
		[?stretchType S_stretchType]
			手柄拉伸参照类型，值为字符串或符号，有效值为relative和absolute，如果为relative则拉伸相对于对象中心，否则相对于手柄作用点，对于absolute类型，向坐标轴正方向拉伸增加尺寸，对于relative类型，向远离对象中心拉伸增加尺寸，默认值为relative
		[?moveOrigin g_moveOrigin]
			原始点在拉伸过程中是否可被移动，值为布尔型，有效值为t和nil，如果值为t则可被移动，否则不可被移动，默认值为nil
		[?updateIncrement f_updateIncrement]
			拉伸过程中更新对象的时间，值为浮点数，如果指定的值为赋值，则系统调用layout编辑器环境中udpatePcellIncrement的值，默认值为udpatePcellIncrement
		[?userData g_userData]
			用户数据，将作为r_defstruct的一部分传递给Sl_userFunction指定的函数
		[?userFunction Sl_userFunction]
			用户定义函数，值为字符串、符号或匿名函数，用户定义函数用于计算拉伸后的参数，不要通过用户定义函数达到其他目的，如创建形状，用户定义函数在拉伸过程中交互式地被计算，无默认值
	) ; end rodAssignHandleToParameter
	=> t | nil

	rodCreateHandle(
		[?name S_name]
			手柄名，值为字符串或符号，字符串用双引号包含，符号加单引号，ROD将符号转为字符串，不要使用user或system定义的手柄名（user-defined system-defined），比如可以使用myPoint，但不要使用centerCenter，如果未指定，则系统指定为handle<n>，<n>从0开始，默认值为handle<n>
		?type S_type
			储存在handle中的数据类型，值为字符串或符号，有效值为Boolean、floating point、integer、point, string或SKILL表达式，此参数必须指定一个值，无默认值
		?value g_value
			handle的指定值，值的类型要与g_value指定的类型相符，若S_type为boolean，则g_value只能为t或nil，若S_type为string，则g_value可以为字符串也可以为符号，此参数必须指定一个值，无默认值
		?rodObj R_rodObj
			所创建手柄所在的ROD对象，此函数必须指定一个值，无默认值
	) ; end rodCreateHandle
	=> t | nil
		创建成功是返回t，否则返回nil

	rodCreatePath(
		[?name S_name]
			路径名（path name），值为字符串或符号，字符串用双引号包含，符号前加单引号，默认值为path<n>
		?layer txl_pinLabelLayer
			主路径的层，值为字符串、数字或者字符串-用途对，如?layer "metal1"、?layer 45、?layer list("metal1" "drawing")
		[?width n_width]
			主路径宽度，值为正整数或浮点数，如果未指定，自动到技术文档调用minWidth，如果minWidth亦未定义则抛错
		[?pts l_pts]
			用于定义主路径中心线点的列表，先指定第一段的起点和终点，然后继续指定后面几段的终点，至少定义两个不重叠的点，不能创建自相交的路径，重叠及共线的点会被忽略，但不会抛错
		[?justification S_justification]
			主路径对点列的偏移方向，点列取中心线、左边缘或右边缘（路径的边缘，而不是收尾），偏移相对于路径方向，有效取值为center、left和right，默认值为center
		[?offset n_offset]
			主路径对点列的偏移量，值为有符号的整数或浮点数，正数使主路径在点列左侧，负数在右侧，默认值为0
		[?endType S_endType]
			主路径两端的类型，值为字符串或符号，有效值为flush、offset、octagon和variable，默认值为flush
		[?beginExt n_beginExt]
			主路径起始端相对起始点延伸或缩减的距离，值为0、正整数或浮点数，若S_endType的值不是variable则此参数会被忽略，默认值为0
		[?endExt n_endExt]
			主路径终端相对终点延伸或缩减的距离，值为0、正整数或浮点数，若S_endType的值不是variable则此参数会被忽略，默认值为0
		[?choppable g_choppable]
			主路径是否可被分割，值为布尔型，t或nil，如果路径包含子部分，而且主路径可被分割，则所有子路径和子矩形都必须可分割，如果主路径不可分割，则子部分或子矩形可被分割性没有要求
		[?cvId d_cvId]
			所创建ROD路径所在cellview的数据库ID，如果rodCreatePath在pcDefinePCell或tcCreateDeviceClass函数中被调用，则默认值分别为pcCellView和tcCellView，否则必须指定一个值，无默认值
		[?fromObj Rl_fromObj]
			ROD已命名的对象或对象列表，以这些对象作为源以创建新的ROD路径，源对象可以是instance，rectangle，polygon，path，line，dot，label和text-display对象，必须指定Rl_fromObj或l_pts中一个的值，如果两者都被指定，则系统忽略l_pts，无默认值
		[?size txf_size]
			边界与主路径中心线的距离，值为有符号的整数、浮点数或SKILL表达式，如果有多个源对象，txf_size为边界与所有源对象和主路径中心线的距离，正数使路径比边界长，负数则比边界短，如果值为SKILL表达式，则表达式的值必须是带有符号的整数或浮点数，只有新建polygon时SKILL表达式才会被计算，如果给出Rl_fromObj，txf_size默认值为0.0，如果只给出txf_size而未给出Rl_fromObj，则系统抛错，默认值为0.0
		[?startHandle l_startHandle]
			生成路径的起始点，值为字符串或符号，如start<n>，有效值为start<n>、mid<n>、end<n>、startLast、midLast和endLast，默认值为start0
		[?endHandle l_endHandle]
			生成路径的终点，值为字符串或符号，如start<n>，有效值为start<n>、mid<n>、end<n>、startLast、midLast和endLast，默认值为start0
		[?prop l_prop]
			自定义属性，值为列表或列表的列表，列表中包含属性名及属性值，如果属性名是字符串需要用双引号包含，如果属性是布尔型，则属性值只能是t或nil，默认值为nil
		[ROD Connectivity Arguments]
		[?offsetSubPath l_offsetSubpathArgs...]
			偏移子路径，值为包含一个或多个列表的列表，每个列表中包含偏移子路径的参数
		[?encSubPath l_encSubpathArgs...]
			附着子路径（蛋疼的翻译，但是没太明白这个子路径是怎么回事），值为一个或多个列表的列表，附着子路径根据主路径中心线创建，每个列表中包含附着子路径的参数
		[?subRect l_subrectArgs...]
			子矩形，值为一个或多个列表的列表，子矩形根据主路径中心线创建，每个列表中包含子矩形的参数
	) ; end rodCreatePath
	=> R_rodObj | nil
			所创建的ROD对象的ID，此对象可能是一个单一的层也可能是多个ROD路径的组合，如果创建过程中出错则返回nil
		; ROD Connectivity Arguments
		[?netName S_netName]
			网络名，值为字符串或符号，字符串用双引号包含，符号前加单引号，ROD将符号转换为字符串，如果网络不存在则自动创建网络，网络名为S_netName指定的值，若将形状联入网络，此参数必选，如果不想指定此参数的值请忽略或指定为nil
		[?termName S_termName]
			终端及网络名，值为字符串或符号，字符串用双引号包含，符号前加单引号，ROD将符号转换为字符串，如果终端和/或网络不存在则自动创建终端，名称为S_termName指定的值，若同时指定S_netName和S_termName的值，则两者的值必须相同，如果一个终端已经有名称，则其所属的网络也必须有相同的名称，若网络名与终端名不符，则函数抛错，若将形状接入网络和终端，此参数必选，如果不想指定此参数的值请忽略或指定为nil
		[?termIOType S_termIOType]
			终端的方向类型（I/O类型），值为字符串或者符号，如果没有指定S_termName则被忽略，如果S_termName指定的终端名已经存在，则此终端的方向类型必须与S_termIOType指定的值相同，否则函数抛错，有效值为input，output, inputOutput，switch和jumper，默认值为inputOutput
		[?pin g_pin]
			所生成的形状是否是引脚，值为布尔型，只能为t或nil，如果指定g_pin而没有指定S_netName或S_termName除nil以外的值，所有连接参数都将被忽略而不给出错误提示，如果不想指定此参数，则忽略它或指定nil，所生成的形状将不是引脚，同时所有包含pin的参数都将被忽略，默认值为nil
		[?pinAccessDir tl_pinAccessDir]
			引脚接入方向，值为字符串或列表，字符串用双引号包含，不要用符号，有效值为top、bottom、left、right、any、none及包含以上值的列表，默认值为any
		[?pinLabel g_pinLabel]
			是否在引脚上显示文字，值为布尔型，只能为t或nil，若值为t，则创建一个值为S_termName的文字对象，并根据其他引脚标记参数将其摆放在引脚附近，若值为nil，则不会创建标签，且所有包含pinLabel的参数都将被忽略，默认值为nil
		[?pinLabelHeight n_pinLabelHeight]
			引脚文字标签垂直高度，值为正整数或浮点数，默认值为1
		[?pinLabelLayer txl_pinLabelLayer]
			文字标签所在的层或层-用途对，值为字符串、整数或列表，字符串用双引号包含，不要使用符号，若只指定层，则用途默认使用l_layer定义的值，默认值为l_layer指定的值
		[?pinLabelFont S_pinLabelFont]
			文字标签的字体，值为euroStyle、gothic、math、roman、script、stick和swedish，默认值为stick
		[?pinLabelDrafting g_pinLabelDrafting]
			引脚文字标签是否允许被旋转超过90度，值为布尔型，只能为t或nil，可以通过S_pinLabelOrient和layout编辑器更改标签角度，若值为t，可旋转角度小于等于90度，若为nil，旋转角度可以超过90度，默认值为t
		[?pinLabelOrient S_pinLabelOrient]
			引脚文字标签的方向，值为字符串或符号，有效值为0、R0、90、R90、180、R180、270、R270、MY、sideways、MYR90、sideways & 90、MX、upsideDown、MXR90和sideways & 270，默认值为R0
		[?pinLabelOffsetPoint l_pinLabelOffsetPoint]
			引脚文字标签偏移量，值为列表，标签起始点由S_pinLabelJust指定，形状操作点由S_pinLabelRefHandle指定，默认值为0:0
		[?pinLabelJust S_pinLabelJust]
			引脚文字标签起始点，值为字符串或符号，有效值为upperLeft、uL、upperCenter、uC、upperRight、uR、centerLeft、cL、centerCenter、cC、centerRight、cR、lowerLeft、lL、lowerCenter、lC、lowerRight和lR，默认值为centerCenter
		[?pinLabelRefHandle S_pinLabelRefHandle]
			引脚文字标签形状操作点，值为字符串或符号，可以指定边框或分段操作点名称，边框有效值为upperLeft、uL、upperCenter、uC、upperRight、uR、centerLeft、cL、centerCenter、cC、centerRight、cR、lowerLeft、lL、lowerCenter、lC、lowerRight和lR，分段有效值为start0、startLast、start<n>、mid0、midLast、mid<n>、end0、endLast和end<n>，ROD路径分段有效值为start0、startLast、start<n>、startLeft0、startLeftLast、startLeft<n>、startRight0、startRightLast、startRight<n>、mid0、midLast、mid<n>、midLeft0、midLeftLast、midLeft<n>、midRight0、midRightLast、midRight<n>、end0、endLast、end<n>、endLeft0、endLeftLast、endLeft<n>、endRight0、endRightLast和endRight<n>，默认值为边框centerCenter
		; end of ROD Connectivity Arguments
		;l_offsetSubpathArgs Offset Subpath Arguments
		list(
			list(
				?layer txl_layer
					子路径的层，值为字符串、整数或列表，字符串用双引号包含，不要用符号，使用主路径中txl_layer参数定义的格式中的一种，需要指定一个层，默认值为drawing
				[?width n_width]
					偏移子路径宽度，值为正整数或浮点数，如果未指定，自动到技术文档调用minWidth，如果minWidth亦未定义则抛错
				[?sep n_sep]
					子路径与主路径中心线或边缘的间隔，值为有符号的整数或浮点数，具体参照取决于S_justification，默认值为0
				[?justification S_justification]
					主路径与子路径间隔参照部分，字符串用双引号包含，符号前加单引号，ROD将符号转换为字符串，当值为left，间隔为子路径右边界与主路径左边界的距离，当值为center，间隔为子路径与主路径的中心线的距离，当值为right，间隔为子路径左边界与主路径右边界的距离，默认值为center
				[?beginOffset n_beginOffset]
					子路径起始端相对于主路径起始端的偏移量，值为有符号的整数和浮点数，正数使子路径起始端延伸出主路径，负数则缩进于主路径，默认值为n_endOffset或0
				[?endOffset n_endOffset]
					子路径终端相对于主路径终端的偏移量，值为有符号的整数和浮点数，正数使子路径终端延伸出主路径，负数则缩进于主路径，默认值为n_beginOffset或0
				[?choppable g_choppable]
					子路径是否可被分割，值为布尔型，有效值为t或nil，如果主路径可被分割，则所有子路径必须都可被分割，如果主路径不可分割，则子路径可以分割也可以不分割，默认值为t
				[?prop l_prop]
					自定义属性，值为列表或列表的列表，列表中包含属性名及属性值，如果属性名是字符串需要用双引号包含，如果属性是布尔型，则属性值只能是t或nil，默认值为nil
				;Repeat ROD Connectivity Arguments here
			) ;End of first offset subpath list
			...
		) ;End of offset subpath lists
		
		;End of l_offsetSubpathArgs
		;l_encSubpathArgs Enclosure Subpath Arguments
		list(
			list(
				?layer txl_layer
					附着子路径层或层-用途对，值为字符串、整数或列表，字符串用双引号包含，不要用符号，使用主路径中txl_layer参数定义的格式中的一种，需要指定一个层，默认值为drawing
				[?enclosure n_enclosure]
					子路径外围与主路径的间隙，值为有符号的整数或浮点数，子路径的宽度系统将按照width = (n_width of master path) - (2 * n_enclosure)计算，如果不指定此参数，系统将在技术文件中调用minEnclosure，若minEnclosure未定义，则rodCreatePath函数抛错，默认值为minEnclosure
				[?beginOffset n_beginOffset]
					附着子路径起始端相对于主路径起始端的偏移量，值为有符号的整数和浮点数，正数使子路径起始端延伸出主路径，负数则缩进于主路径，默认值为n_endOffset或0
				[?endOffset n_endOffset]
					附着子路径终端相对于主路径终端的偏移量，值为有符号的整数和浮点数，正数使子路径终端延伸出主路径，负数则缩进于主路径，默认值为n_beginOffset或0
				[?choppable g_choppable]
					附着子路径是否可被分割，值为布尔型，有效值为t或nil，如果主路径可被分割，则所有子路径必须都可被分割，如果主路径不可分割，则子路径可以分割也可以不分割，默认值为t
				[?prop l_prop]
					自定义属性，值为列表或列表的列表，列表中包含属性名及属性值，如果属性名是字符串需要用双引号包含，如果属性是布尔型，则属性值只能是t或nil，默认值为nil
				;Repeat ROD Connectivity Arguments here
				) ;End of first enclosure subpath list
				...
			) ;End of enclosure subpath lists
		;End of l_encSubpathArgs
		;l_subrectArgs Subrectangle Arguments
		list(
			list(
				?layer txl_layer
					子矩形层或层-用途对，值为字符串、整数或列表，字符串用双引号包含，不要用符号，使用主路径中txl_layer参数定义的格式中的一种，需要指定一个层，默认值为drawing
				[?width n_width]
					子矩形宽度，值为正整数或浮点数，矩形宽度为与主路径宽度平行方向的尺寸，如果未指定，系统使用n_length的值，如果n_length也未指定，系统使用技术文件中的minWidth，如果minWidth亦未指定，rodCreatePath函数抛错并返回nil，默认值为n_length或minWidth
				[?length n_length]
					子矩形长度，值为正整数或浮点数，矩形长度为与主路径中心线平行方向的尺寸，如果未指定，系统使用n_width的值，如果n_width也未指定，系统使用技术文件中的minWidth，如果minWidth亦未指定，rodCreatePath函数抛错并返回nil，默认值为n_width或minWidth
				[?gap S_gap]
					各段放置子矩形的方法，值为字符串或符号，字符串用双引号包含，符号前加单引号，ROD将符号转为字符串，系统总是先使用n_space作为子矩阵的间距，之后计算可以放置子矩阵的最大数量，n_beginOffset和endOffset所需要的空间也会被考虑进去，当值为distribute时系统将尽量根据mfgGridResolution的值以网格间距的倍数均匀摆放子矩形，任何剩余的空间都会放在最后一个子矩形的后面，若值为distribute且只有一个子矩形，则系统将此矩形摆放在中间，如果值为minimum，系统按照n_space的间隔摆放子矩形，直至没有空间以摆放下一个，之后将其余空间放在最后一个矩形后面，有效值为distribute和minimum，默认值为distribute
				[?sep n_sep]
					子矩形与主路径中心线或边缘的间隔，值为有符号的整数或浮点数，具体参照取决于S_justification，默认值为0
				[?justification S_justification]
					主路径与子矩形间隔参照部分，字符串用双引号包含，符号前加单引号，ROD将符号转换为字符串，当值为left，间隔为子矩形右边界与主路径左边界的距离，当值为center，间隔为子矩形与主路径的中心线的距离，当值为right，间隔为子矩形左边界与主路径右边界的距离，默认值为center
				[?beginOffset n_beginOffset]
					第一个子矩形相对于主路径起始端的偏移量，值为有符号的整数和浮点数，正数使第一个子矩形延伸出主路径，负数则缩进于主路径，默认值为n_endOffset或0
				[?endOffset n_endOffset]
					最后一个子矩形相对于主路径终端的偏移量，值为有符号的整数和浮点数，正数使最后一个子矩形延伸出主路径，负数则缩进于主路径，默认值为n_beginOffset或0
				[?space n_space]
					两个相邻子矩形的间隙，值为正整数或浮点数，如果未指定系统调用技术文件中的minSpacing，如果minSpacing未定义，则rodCreatePath函数返回nil并抛错，默认值为minSpacing
				[?choppable g_choppable]
					子矩形是否可被分割，值为布尔型，有效值为t或nil，如果主路径可被分割，则所有子矩形必须都可被分割，如果主路径不可分割，则子矩形可以分割也可以不分割，默认值为t
				[?prop l_prop]
					自定义属性，值为列表或列表的列表，列表中包含属性名及属性值，如果属性名是字符串需要用双引号包含，如果属性是布尔型，则属性值只能是t或nil，默认值为nil
				;Repeat ROD Connectivity Arguments here
				) ;End of first subrectangle list
				...
			) ;End of subrectangle lists
		;End of l_subrectArgs

	rodCreatePolygon(
		[?name S_name]
			多边形名称，值为字符串或符号，字符串用双引号包含，符号前加单引号，ROD将符号转换为字符串，cellview中名称必须是唯一的，如果不指定，系统自动赋值为polygon<n>，<n>从0开始，默认值为polygon<n>
		?layer txl_layer
			多边形的层，值为字符串、整数或列表，字符串用双引号包含，不要用符号，使用主路径中txl_layer参数定义的格式中的一种，需要指定一个层，默认值为drawing
		[?pts l_pts]
			用于定义多边形边界线点的列表，先指定第一段的起点和终点，然后继续指定后面几段的终点，之后系统自动连接起点和终点形成封闭区域，不能创建自相交的边界，至少定义三个不重叠不共线的点，重叠及共线的点会被忽略，但不会抛错，必须指定l_pts或Rl_fromObj的值，如果两者均指定，系统忽略l_pts，无默认值
		[?cvId d_cvId]
			所创建ROD多边形所在cellview的数据库ID，如果rodCreatePolygon在pcDefinePCell或tcCreateDeviceClass函数中被调用，则默认值分别为pcCellView和tcCellView，否则必须指定一个值，无默认值
		[?fromObj Rl_fromObj]
			ROD已命名的对象或对象列表，以这些对象作为源以创建新的ROD多边形，源对象可以是instance，rectangle，polygon，path，line，dot，label和text-display对象，必须指定Rl_fromObj或l_pts中一个的值，如果两者都被指定，则系统忽略l_pts，无默认值
		[?size txf_size]
			多边形尺寸，值为带有符号的整数、浮点数或SKILL表达式，定义所创建多边形与源对象尺寸的差别，如果源对象有多个，则为所创建多边形的边框与源对象边框的差别，整数使所创建的多边形大于源对象，负数则小于，如果指定SKILL表达式，则SKILL表达式的值必须是带有符号的整数或浮点数，SKILL表达式只在对象创建的时候计算一次，如果指定了Rl_fromObj而未指定txf_size则默认为0.0，如果指定了txf_size的值而未指定Rl_fromObj则系统抛错，默认值为0.0
		[?prop l_prop]
			自定义属性，值为列表或列表的列表，列表中包含属性名及属性值，如果属性名是字符串需要用双引号包含，如果属性是布尔型，则属性值只能是t或nil，默认值为nil
		; ROD Connectivity Arguments for Polygons 具体说明见rodCreatePath函数后的ROD Connectivity Arguments for Polygons说明
		[?netName S_netName]
		[?termName S_termName]
		[?termIOType S_termIOType]
		[?pin g_pin]
		[?pinAccessDir tl_pinAccessDir]
		[?pinLabel g_pinLabel]
		[?pinLabelHeight n_pinLabelHeight]
		[?pinLabelLayer txl_pinLabelLayer]
		[?pinLabelFont S_pinLabelFont]
		[?pinLabelDrafting g_pinLabelDrafting]
		[?pinLabelOrient S_pinLabelOrient]
		[?pinLabelOffsetPoint l_pinLabelOffsetPoint]
		[?pinLabelJust S_pinLabelJust]
		[?pinLabelRefHandle S_pinLabelRefHandle]
	) ; end rodCreatePolygon
	=> R_rodObj | nil
		所创建的ROD对象的ID，此对象可能是一个单一的层也可能是多个ROD路径的组合，如果创建过程中出错则返回nil

	rodCreateRect(			//214
		[?name S_name]
		?layer txl_layer
		[?width n_width]
		[?length n_length]
		[?origin l_origin]
		[?bBox l_bBox]
		[?elementsX x_elementsX]
		[?elementsY x_elementsY]
		[?spaceX n_spaceX]
		[?spaceY n_spaceY]
		[?cvId d_cvId]
		[?fillBBox l_fillBBox]
		[?fromObj Rl_fromObj]
		[?size txf_size]
		[?prop l_prop]
		[?returnBoolean g_returnBoolean]
		[ROD Connectivity Arguments]
		[?subRectArray l_subrectArgs...]
	) ; end of rodCreateRect
	=> R_rodObj | t | nil
		; ROD Connectivity Arguments for Rectangles
		[?netName S_netName]
		[?termName S_termName]
		[?termIOType S_termIOType]
		[?pin g_pin]
		[?pinAccessDir tl_pinAccessDir]
		[?pinLabel g_pinLabel]
		[?pinLabelHeight n_pinLabelHeight]
		[?pinLabelLayer txl_pinLabelLayer]
		[?pinLabelFont S_pinLabelFont]
		[?pinLabelDrafting g_pinLabelDrafting]
		[?pinLabelOrient S_pinLabelOrient]
		[?pinLabelOffsetPoint l_pinLabelOffsetPoint]
		[?pinLabelJust S_pinLabelJust]
		[?pinLabelRefHandle S_pinLabelRefHandle]
		;l_subrectArgs Subrectangle Arguments
		list(
			list(
				?layer txl_layer
				[?width n_width]
				[?length n_length]
				[?gap S_gap]
				[?lowerLeftOffsetX n_lowerLeftOffsetX]
				[?lowerLeftOffsetY n_lowerLeftOffsetY]
				[?upperRightOffsetX n_upperRightOffsetX]
				[?upperRightOffsetY n_upperRightOffsetY]
				[?spaceX n_spaceX]
				[?spaceY n_spaceY]
				[?prop l_prop]
				;Repeat ROD Connectivity Arguments here
			) ;End of first subrectangle list
		...
		) ;End of all subrectangle lists
		;End of l_subrectArgs
