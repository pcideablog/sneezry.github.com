没错，IC，不是IT。其实集成电路还是挺有趣的，尤其是在架构复杂逻辑门繁多的电路中电子的运动轨迹飘忽不定（量子力学神马的最讨厌了）以及各种几近无解的DRC错误面前。

##异形MOSFET栅的有效宽度

我知道看我博客的大部分是coder，请原谅我先把本专业的东西放在了第一位，我希望没有因为这样而吓跑你们——其实你们不感兴趣的话读下一段就好了（LoL...）。我在研一上学期的工作就是制作一个抗辐射总粒子效应的MOSFET，在宇宙等特殊环境下，普通MOSFET会因总粒子效应漏电，这是一般工艺无法克服的问题，目前比较普遍的做法是将有源区直接做在二氧化硅上，但这种工艺造价过高。为了解决这个问题，人们想出了异形栅的结构来避免辐射环境下漏电。但这种异形栅无法使用普通MOSFET的模型，因为它的栅的几何形状是不规则的。之前BOS提出的要求是让我直接测试相应的SPICE模型，不过这样要测什么怎么测也是个问题。不过现在想想，除了栅的几何形状不同外，其他的和普通的MOSFET没啥区别，不如把重点放在栅宽的等效上，然后直接用等效后普通MOSFET的参数。于是接下来的重点就是几何等效转换的问题，这似乎要涉及到流体力学的领域了。不过总的来说有个努力的思路和方向总是好的，保佑我马上有文章……

##看，我们的页面开始自适应了

虽然玩前端有一段时间了，但是自适应这玩意绝对不是媒体查询这么简单。其实我也问过我自己，PC时代屏幕尺寸也从没统一过，怎么移动时代突然开始强调自适应了呢？答案是，移动设备屏幕面积太有限，要更加最大限度加以利用。比如你看，在宽屏刚刚面世的时候，各个网站是如何进行优化的呢？两边留白吧。但是移动设备上我们不能这么做。

当我做第一个针对手机的web时，我只是简简单单地在head中加一个viewport，并将width设置为device-width，即320px，再之后就以320px的页面宽度将其他所有元素尺寸都固定了，之后在iPhone上看起来相当完美，至于安卓上的效果……别问了好吗。于是我意识到，事情似乎并没有那么简单，不过我依然没有想到使用响应式的尺寸，还是把思路定在怎么让手机浏览器以320px页宽进行重新渲染。于是我把我的疑问发到了社区上，当我看到一位社区成员的回复后我知道我走偏了：你正在毁掉note2用户的优越感。

没错，这么做是没有意义的。对于大尺寸设备，我们到底是应该提供更大的内容还是更多的内容？如果单纯地让所有浏览器以320px页宽进行渲染显然会提供更大的内容，但这明显是不科学的。明智的做法是区别对待，对于展示细节的图片等媒体，我们要向大尺寸设备用户提供更大的内容，而对于文字等，我们要提供更多的内容。

一切看起来都说得通了，但是一个问题也摆在了我们眼前，有时我们需要固定元素的宽长比。对于水果来说，它使用固定的320px页宽渲染，高度算起来自然不难，那么安卓怎么办？我们要用js吗？js当然可以，但是这也许会影响用户的使用体验。当我在Google中搜索到 szy.me/q2n 这篇文章时，终于豁然开朗。CSS中的paddding属性，如果使用百分比作为属性值，那么它总是相对于父系宽度的。

##局域网里那些家伙用Chrome聊起来了

之前组里一个同学问我能不能写一个程序用于局域网内交流。组内的计算机都没有连接到Internet，要想接入互联网需要通过远程桌面登录一台固定的服务器，而同学之间的交流也是通过这台服务器上的QQ进行的，切来切去也确实不方便。之前研究ANTNET时接触了Chrome的socket功能，这正好可以解决这个问题。于是第二天就把写好的APP交付他使用了，这个APP使用了udp的多播功能，我为这个APP起的名字是ELM，全称Eric-Lab Messager，使用的多播地址是233.233.233.233（LoL...）。

现在Chrome可以做的事情确实越来越多了，不过请稍等，这里有三个槽点。第一个是Chrome的socket API又变了，首先是sockets权限不再在permissions中声明，而是直接在manifest中添加了sockets属性，幸好之前写的《Chrome扩展及应用开发》写到高级API没有往下写，否则又要抓紧改了。第二个还是和sockets API相关的，根据官方文档，如果要使用udp的多播功能，需要在udp对象中声明multicastMembership属性，属性值类型为SocketHostPatterns，但在实际操作中，无论你填写"*"还是"233.233.233.233:14259"都会抛出一个不是有效host:port的错误，但是如果改成空字符串""就正常了，我想这个坑会挡住不少人吧。第三个，就是我们都知道Chrome为扩展提供了一个background的权限，可以让扩展在系统刚启动时以及Chrome浏览器关闭后都一直运行，这对于收发邮件和消息的扩展来说非常有用，但Chrome却不允许APP这么做。由于ELM也要一直监听消息，这无疑会造成麻烦。经过一系列搜索，终于知道原因了——Chromium团队要提供一个systray特性以让APP获得类似background的效果，为了避免现有的APP依赖与background权限实现后台运行，他们就禁止了APP的background权限（https://code.google.com/p/chromium/issues/detail?id=163770）。按照鸟哥的话，就是新的feature还没实现，他们就把旧的bug kill掉了。

##无法山寨的态度

曾经看过一个段子，how to translate "山寨" to English？made in China。我们确实一直在山寨，各个领域，也不乏高端的领域，比如IC——我们有技术先进的扒片公司，通过腐蚀、染色和拍照，可以将芯片各层结构清晰地展示出来供IC工程师分析。但有一点我们很难山寨，那就是老外的做事态度。并不是说我们都不如他们，但确实大多数人太浮躁。之前我向Chromium上报了一个BUG，Google的一位工程师就为这个issue专门写了一个扩展进行测试，同时他也将这个扩展发给我测试，当我载入之后我发现连CSS都写得非常完备，而且这个扩展还有一个图标——其实这些对bug的检测是没有帮助的。再有就是我在stack overflow上发起第一个提问后不久就收到了5条消息，这5条消息都是so上的用户对我问题的改进建议——请贴出相关css代码和html代码，这样有助于问题的解决。虽然我当时只是随手丢上去一个问题，其实我也没打算会收到回复，但事实是我收到了，即使是一个笼统含糊的问题他们也愿意耐心地进行回复。之后在我改进了问题后，我收到的答案包括原理分析、完整的实现代码以及一份在线demo。通过这两件事我深深感受到，这种令人敬佩的态度我们是无法山寨的，但这种态度却能决定得太多太多。

##我要练习几个英雄才能打好dota2

一个，你一个人能决定得太少了，认真打好自己的，其他的就听天由命吧。当你的队友中有一个出秘法的火枪你还能做什么呢……

火枪，亚巴顿放大的时候你可以选择不狙击他，谢谢。
