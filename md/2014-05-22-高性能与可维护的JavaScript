前一段时间从图书馆借了两本讲JavaScript的书，分别是《高性能JavaScript》和《编写可维护的JavaScript》。随着用JavaScript编写的项目越来越大，参与的人数越来愈多，高性能和可维护称为了JavaScript开发的迫切需求。由于还期将至，另外也算是自己的笔记，今天写了这篇概括性极强的文章。Rebornix之前和我开玩笑说这叫the good parts，不过玩笑终归是玩笑，对于两本经典的著作我是不敢随意糟蹋的，所以请各位读者注意，如果想认真学习相关知识还是要读原书啊。

同学喊我刀塔，一会接着写。

5.27 为我的拖延症向大家道歉，接着写了~

##高性能JavaScript

+ 尽量将多个JS脚本合并成一个，并紧贴在</body>引用。

+ 尽量多地使用局部变量，禁止使用with。

+ 多次操作DOM对象时用局部变量储存DOM对象。

+ 减少重绘次数，尽量一次性更改CSS样式。

+ 使用querySelectorAll和firstElementChild等更快的API。

##可维护的JavaScript

+ 使用4个空格缩进。

+ 不省略分号。

+ 一行代码不超过80个字符。

+ 由于过长而折行的代码，第二行缩进两个层级。

+ 由于过长而折行的代码从运算符后断行。

+ 赋值运算如果过长折行，第二行与等号后对齐。

+ 方法之间、方法中局部变量与第一条语句之间、注释之间和方法逻辑片段之间插入空行。

+ 使用驼峰式命名变量，首字母小写。

+ 变量用名词性单词命名，函数用动词性单词命名。

+ 代表常量的变量名（JavaScript里没有真正的常量）用全大写字母。

+ 小数的整数部分和小数部分都不要省略，即不要以小数点开头也不要以小数点结尾。

+ 禁止以0开头的数字。

+ 不使用null检测是否传人某参数，用undefined。

+ 不使用null检测未初始化的变量。

+ 使用[]和{}初始化数组和对象。

+ 单行注释//后留一个空格。

+ 单行注释与其注释的代码段保持一致的缩进。

+ 多行注释使用Java风格的注释：

    /*
     * Sneezry有一只阿拉斯加雪橇犬
     * 这只雪橇犬喜欢与Sneezry抢吃的
     */

+ 不添加无意义的注释。

+ 为难于理解或可能被误解（dirty code）的代码添加注释。

+ 文档注释：

    /**
    这个方法用来寻找Sneezry的阿拉斯加
    在寻找Sneezry的时候这个方法不适用
    @method findSneezrysAlaska
    @param {Object} Sneezry的阿拉斯加的特点
    @return {Object} 一个阿拉斯加对象
    **/

+ if和for等语句永远使用花括号包含子语句。

+ 左花括号不独占一段。

+ case在switch下一层级。

+ 为每个case语句添加break，除非添加专门的注释。

+ 标清注释的情况下可省略default。

+ 禁止使用with。

+ for循环中禁止使用continue。

+ for-in只用于遍历对象成员，禁止用于遍历数组。

+ 局部变量定义放在函数内第一句。

+ 函数先定义后调用。

+ 调用函数时括号和函数名直接不加空格。

+ 立即调用的函数，用括号将函数体包围：

    var getAlaskasFriend = (function() {
        return 'Sneezry';
    })();

+ 只在局部使用严格模式，禁止全局使用严格模式：

    function doSomethingStrictly (){
        "use strict";
        //some code
    }

+ 禁止使用==，使用===判断相等。

+ 避免使用eval、setTimeout和setInterval调用字符形式代码、Function。

+ 禁止使用new String、new Boolean和new Number创建字符串、布尔和数字对象。

先写这么多，慢慢更新追加。