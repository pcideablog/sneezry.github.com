去中心化是当今非常流行的一个词，去中心化更加符合Geek们崇尚自由的精神。另外最近我也在考虑建立一个开放的分布式去中心化实时通信网络。从比特币到电驴，去中心化网络已经有很多成熟的应用。那么到底什么是去中心化？为什么传统网络架构中需要一个中心？中心，从字面意义来说，就是核心的意思。那么为什么一个网络中需要核心？首先想一个问题，用户A想和用户B通信，首先用户A要先找到用户B，那么用户A如何找到用户B呢？首先用户A向一个服务器询问用户B的地址，服务器返回相应信息后用户A才能找到用户B，这就是中心的作用——传达室，或者叫注册中心，所有用户上线后第一件事就是向中心报告自己的情况，以便其他用户连接前进行查询。

既然中心在一个网络中起到的是传达室入口的作用，那么去中心化的网络中怎么让不同用户之间相互知道对方的地址呢？很简单，每个人如果都是中心，那么其实就没有中心了。在去中心化的网络中，每个用户都提供查询和注册的作用，每个用户都向其他已知的用户报告自己的状态，当用户A想连接用户B时只需随便询问一个已知的用户就可以了。

讲到这里我们不得不面对几个问题：每个用户要负责多少用户信息的管理？怎样分配管理任务才能让整个网络的效率和覆盖率最高？换句话说是如何让这个网络自收敛。

我刚开始研究去中心化网络时是研究的BT下载，虽然BT下载是P2P网络，它不需要一个中心服务器来完成文件的传输下载，但是BT网络并不能算是一个去中心化网络，因为tracker是BT网络中的中心，其他用户并不提供tracker的作用。之后我又研究了电驴的KAD网络，KAD网络是一个真正的去中心化网络。在研究完KAD网络之后我想如果想建设一个开放的分布式去中心化实时通信网络的第一步就是完成了——找到目标计算机的ip。但这时又一个问题浮现在了我的眼前：为什么我知道目标计算机的ip就可以和它进行通信？

我们好像很少会想到这个问题，当想和一台计算机通信时我们第一个想法就是想法设法知道它的ip，那么当我们知道了它的ip之后，网络中到底又发生了什么才使得两台计算机联系上了呢？带着这个有趣的问题，这两天我专门翻阅了计算机网络这本书，在路由选择的章节找到了答案——其实又是一个KAD网络，或者说KAD网络是对路由选择的模仿。

路由选择是这样的一个过程：当A计算机要连接B计算机时，A计算机并不知道应该通过怎样的路由路径到达B计算机（如果A计算机保存了到达世界上所有计算机的路由表，这张表将是非常庞大的），那么A计算机只向所有它知道的路由（在A计算机路由表中保存的路由信息）发送连接B计算机的请求，而这些路由接收到这个请求后继续向所有此路由知道的路由继续发送此请求，如此下去，终会联系到计算机B——总会有路由知道计算机B的，除非它没连接到网络中。那么A计算机连接到B计算机的路由通路通常不是唯一的：从北京可以绕道欧洲后再接回上海，所以经过的路由最少的路径会最终被选择。

KAD网络是这样的，首先接入网络的计算机不像路由网络中以ip作为身份标识，而是以随机生成的32位唯一id作为身份标识。计算机A想连接计算机B，首先计算机A向它已知的所有在网络中的计算机发送请求连接计算机B（发送的是计算机B的32位id），然后所有计算机返回id与计算机B最接近的计算机，之后A再向这些计算机发送同样的请求，这些计算机继续返回id更加接近计算机B的计算机，如此循环下去直到找到计算机B，如果返回的计算机id不再收敛而又不是计算机B，那么说明计算机B不在线。

大家也许会发现一个问题，一个新计算机如果加入到一个无中心的网络中呢？没错，如果我们对这个网络一无所知，我们怎么加入到这个网络中呢？如果想加入到一个无中心的网络，我们必须事先知道至少一个已经在网络中的计算机。无论是比特币还是电驴，它们都在软件中嵌入了一批用户信息，当新用户加入时就会向这些保存在软件中的“种子”用户请求信息，之后它们搜集的信息越来越多而不再依赖“种子”用户。这些“种子”用户叫做Bootstrap，没有Bootstrap，无中心的网络就无法加入进去，这也是无中心网络的缺陷所在。而对于路由网络，它并不担心Bootstrap——世界上大部分的重要路由的ip是不经常变动的。

实话说，我在接触KAD网络和路由网络前也曾自己想过这种网络架构模式——每个用户负责一个有限区域的路由，然后这些自制区域连成一个完整的网络，但我一是担心某个区域是否会成为孤岛，再有就是效率问题，通过以上两个网络的了解，认识到了如何让一个网络自闭、收敛并完全遍历，同时和很高兴地看到路由网络证明这种网络的效率并不差！

我很钦佩前人能想出这么完美智慧的方法，但正当我对他们佩服得五体投地时，我看到了下面这幅图片，瞬间被大自然折服了——我们在大自然面前永远都是低等的存在。

![Lightning](/postimg/20130926.gif)