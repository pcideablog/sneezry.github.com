在JavaScript中复制数组时我们经常听到深复制和浅复制，那么深复制与浅复制有什么区别呢？在JavaScript中复制数组需要注意些什么呢？

复制数组和复制其他类型的数据不同，我们来举个栗子：

    var a = 1024;
    var b = a;
    a = 256;
    console.log(b);
    
这个结果是1024，毫无疑问。我们再来看下一个栗子：

    var a = [1, 2, 3];
    var b = a;
    a[0] = 4;
    console.log(b);
    
这个结果是`[4, 2, 3]`，也许会让一些人感觉意外。我们下面来详细分析一下两段代码。

对于栗子1，`a`的值被赋为1024，之后将`a`的值赋给了`b`，此后`a`与`b`没有任何关系了。这就好比`b`抄了`a`的作业，抄完之后`a`无论怎么再修改它自己的作业，`b`的作业都不会再改变。接下来看栗子2，`a`的值是一个数组`[1, 2, 3]`，之后将`a`的结果传给`b`。但是这个过程和抄作业不同，这里更像是b上课没带书，而借`a`的书一起看，此时`a`在书上做了笔记，`b`也会看到。

这就是数组复制中说的浅复制：在将数组`a`的值赋给`b`时，用简单的等号只会将`a`数组的地址赋给`b`，而不是在内存中重新开拓一块区域将`a`数组的内容完整复制进去。

更进一步说，`var a = [1, 2, 3];`这句话的运行过程是，内存中先开拓出一块区域将`[1, 2, 3]`存进去，然后把这块内存的首地址赋给`a`。

         +---+---+---+
    a -> | 1 | 2 | 3 |
         +-+-+-+-+-+-+

如此，`a[0]`指向这块内存的第一个单元，`a[1]`指向第二个……

当我们执行`var b = a;`时，我们将`a`的值，实际是这块内存的首地址传给了`b`，也就是说b也指向了这块内存：

         +---+---+---+
    b -> | 1 | 2 | 3 |
         +-+-+-+-+-+-+
         
执行`a[0] = 4;`也就是说将这块内存的第一个单元里的值改为4：

    +---+---+---+
    | 4 | 2 | 3 |
    +-+-+-+-+-+-+

所以此时`a`和`b`所指向的数组就都变成了`[4, 2, 3]`。

下面我们再考虑这个栗子：

    var a = [1, 2, 3];
    var b = a;
    a = [2, 3, 4];
    console.log(b);
    
这个栗子的结果是`[1, 2, 3]`，为什么不是`[2, 3, 4]`了呢？我们来继续仔细考虑一下：

首先还是内存中开拓一块新区域来储存`[1, 2, 3]`，并让`a`指向这块内存：

         +---+---+---+
    a -> | 1 | 2 | 3 |
         +-+-+-+-+-+-+
         
然后`b`也指向了这块内存：

         +---+---+---+
    b -> | 1 | 2 | 3 |
         +-+-+-+-+-+-+
         
但是接下来我们执行了`a = [2, 3, 4];`，那么内存重新开拓了个区域来保存`[2, 3, 4]`，并让`a`指向那里，但是`b`没有被影响，依然指向曾经的内存块：

         +---+---+---+
    a -> | 2 | 3 | 4 |
         +-+-+-+-+-+-+
         
         +---+---+---+
    b -> | 1 | 2 | 3 |
         +-+-+-+-+-+-+
         
于是结果就是[1, 2, 3]了。

我们来对比下，这个栗子和上个栗子为何对b的影响不同？`a[0]`改变的是内存单元中的数值，而`a`改变的是内存的地址。

所以，当我们简单把一个数组用等号复制给另一个变量时要小心，当你改变其中一个数组的值时，另一个也会被影响！

那么如何避免这个问题呢？很简单，就是用深复制。深复制的意思就是我们强制让内存重新开拓个新区域保存我们的新数组变量，之后把之前数组的每个值一一复制进去，比如：

    var a = [1, 2, 3];
    var b = [];
    for(var i=0; i<a.length; i++){
        b[i] = a[i];
    }
    
上面的栗子是最简单最直接的方法对数组进行深复制，当然深复制还有很多其他的方法，比如：

    var b = a.join(',').split(',');
    var b = a.concat();

等等。
